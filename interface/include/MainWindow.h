#pragma once

#include <memory>

#include <QWidget>
#include <QLabel>

#include "opencv2/imgproc.hpp"

#include "Environment.h"
#include "Frame.h"
#include "GridPoints.h"
#include "Voxel.h"
#include "VoxelCluster.h"
#include "Dictionary.h"
#include "SparsityDrivenDetectorPostProcessing.h"
#include "Fusion.h"


// MainWindow is compiled as part of a library. External code has no access
// to the autogenerated ui_MainWindow.h
namespace Ui
{
	class MainWindow;
}


class MainWindow : public QWidget
{
	Q_OBJECT

public:
	MainWindow(QWidget * pParent = nullptr);
	~MainWindow();

public slots:
	void showStaticElements(const Environment & env) const;
	void showGrid(const GridPoints & grid) const;

	void showGroundTruth(const Frame & f) const;
	void showSolution(const Solution & s) const;
	void showMergedSolution(const MergedSolution & s) const;
	void showFusedSolution(const FusedSolution & s) const;

	void showSfsObjects(const std::vector<const sfs::Voxel *> & voxel, const std::vector<sfs::VoxelCluster> & cluster) const;
	
	void showSegmentationImages(const std::vector<cv::Mat> & images) const;
	void showReconstructedImages(const std::vector<cv::Mat> & images) const;

	void clearSolution() const;
	void clearMergedSolution() const;
	void clearFusedSolution() const;
	void clearReconstructedImages() const;

private:
	std::unique_ptr<Ui::MainWindow> m_ui;

	int id_environment_lights;
	int id_environment_coordinates;
	int id_environment_cameras;
	int id_environment_staticMesh;
	int id_environment_navMesh;

	int id_groundTruth;
	int id_solution;
	int id_mergedSolution;
	int id_fusedSolution;
	int id_grid;

	int id_sfs;

	std::vector<QLabel*> m_segmentationLabels;
	std::vector<QLabel*> m_reconstructedLabels;
};